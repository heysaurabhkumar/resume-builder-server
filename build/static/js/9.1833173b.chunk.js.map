{"version":3,"sources":["components/auth/ResetPassword.js","helpers/Validators.js"],"names":["ResetPassword","history","useHistory","container","useRef","useParams","id","token","useForm","resolver","yupResolver","resetSchema","register","handleSubmit","errors","formState","onSubmit","data","a","AuthService","reset","swal","push","useEffect","lottie","loadAnimation","current","render","loop","autoplay","animationData","require","className","ref","htmlFor","type","placeholder","password","message","confirmPassword","loginSchema","yup","shape","email","required","min","forgotSchema","registerSchema","username","oneOf"],"mappings":"wzvMAWe,SAASA,IACtB,IAAMC,EAAUC,cAEVC,EAAYC,iBAAO,MAEzB,EAAsBC,cAAdC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,MACZ,EAIIC,YAAQ,CACVC,SAAUC,YAAYC,OAJtBC,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAKTE,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACTC,IAAYC,MAAZ,2BAAuBH,GAAvB,IAA6BX,KAAIC,WADxB,OAEfc,IACE,mBACA,wDACA,WAEFpB,EAAQqB,KAAK,UAPE,2CAAH,sDAoBd,OAVAC,qBAAU,WACRC,IAAOC,cAAc,CACnBtB,UAAWA,EAAUuB,QACrBC,OAAQ,MACRC,MAAM,EACNC,UAAU,EACVC,cAAeC,EAAQ,SAExB,IAGD,mCACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,qBAAKC,IAAK9B,MAEZ,qBAAK6B,UAAU,2BAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,QAAd,8BAEF,qBAAKA,UAAU,YAAf,SACE,uBAAMA,UAAU,OAAOhB,SAAUH,EAAaG,GAA9C,UACE,sBAAKgB,UAAU,aAAf,UACE,uBAAOE,QAAQ,WAAf,0BACA,mCACE5B,GAAG,WACH6B,KAAK,WACLH,UAAU,yBACVI,YAAY,sBACRxB,EAAS,cAEdE,EAAOuB,UACN,qBAAKL,UAAU,0BAAf,SACGlB,EAAOuB,SAASC,aAIvB,sBAAKN,UAAU,aAAf,UACE,uBAAOE,QAAQ,kBAAf,8BACA,mCACE5B,GAAG,kBACH6B,KAAK,WACLH,UAAU,yBACVI,YAAY,oBACRxB,EAAS,qBAEdE,EAAOyB,iBACN,qBAAKP,UAAU,0BAAf,SACGlB,EAAOyB,gBAAgBD,aAI9B,wBAAQH,KAAK,SAASH,UAAU,8BAAhC,+C,gCCzFlB,oJAEMQ,EAAcC,MAAaC,MAAM,CACrCC,MAAOF,MAAaE,MAAM,yBAAyBC,SAAS,aAC5DP,SAAUI,MAEPG,SAAS,aACTC,IAAI,EAAG,0CAGNC,EAAeL,MAAaC,MAAM,CACtCC,MAAOF,MAAaE,MAAM,yBAAyBC,SAAS,eAGxDG,EAAiBN,MAAaC,MAAM,CACxCC,MAAOF,MAAaE,MAAM,yBAAyBC,SAAS,aAC5DI,SAAUP,MAEPG,SAAS,aACTC,IAAI,EAAG,wCACVR,SAAUI,MAEPG,SAAS,aACTC,IAAI,EAAG,wCACVN,gBAAiBE,MAEdG,SAAS,aACTK,MAAM,CAACR,IAAQ,YAAa,MAAO,0BAGlC9B,EAAc8B,MAAaC,MAAM,CACrCL,SAAUI,MAEPG,SAAS,aACTC,IAAI,EAAG,wCACVN,gBAAiBE,MAEdG,SAAS,aACTK,MAAM,CAACR,IAAQ,YAAa,MAAO","file":"static/js/9.1833173b.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport swal from \"sweetalert\";\r\nimport lottie from \"lottie-web\";\r\n\r\nimport AuthService from \"../../services/AuthService\";\r\n\r\nimport { resetSchema } from \"../../helpers/Validators\";\r\n\r\nexport default function ResetPassword() {\r\n  const history = useHistory();\r\n\r\n  const container = useRef(null);\r\n\r\n  const { id, token } = useParams();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(resetSchema),\r\n  });\r\n\r\n  const onSubmit = async (data) => {\r\n    await AuthService.reset({ ...data, id, token });\r\n    swal(\r\n      \"Password Updated\",\r\n      \"Your pasword has been updated. Login with new paword.\",\r\n      \"success\"\r\n    );\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    lottie.loadAnimation({\r\n      container: container.current,\r\n      render: \"svg\",\r\n      loop: true,\r\n      autoplay: true,\r\n      animationData: require(\"../../lottie/reset-password.json\"),\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"row pt-5\">\r\n          <div className=\"col-md-6 mx-auto\">\r\n            <div ref={container}></div>\r\n          </div>\r\n          <div className=\"col-md-6 mx-auto my-auto\">\r\n            <div className=\"card rounded-0\">\r\n              <div className=\"card-header\">\r\n                <h3 className=\"mb-0 \">Reset Password</h3>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"password\">New Password</label>\r\n                    <input\r\n                      id=\"password\"\r\n                      type=\"password\"\r\n                      className=\"form-control rounded-0\"\r\n                      placeholder=\"Enter new Password\"\r\n                      {...register(\"password\")}\r\n                    />\r\n                    {errors.password && (\r\n                      <div className=\"alert alert-danger mt-2\">\r\n                        {errors.password.message}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"confirmPassword\">Confirm Password</label>\r\n                    <input\r\n                      id=\"confirmPassword\"\r\n                      type=\"password\"\r\n                      className=\"form-control rounded-0\"\r\n                      placeholder=\"Confirm Password\"\r\n                      {...register(\"confirmPassword\")}\r\n                    />\r\n                    {errors.confirmPassword && (\r\n                      <div className=\"alert alert-danger mt-2\">\r\n                        {errors.confirmPassword.message}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <button type=\"submit\" className=\"btn btn-success float-right\">\r\n                    Reset Password\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import * as yup from \"yup\";\r\n\r\nconst loginSchema = yup.object().shape({\r\n  email: yup.string().email(\"Invalid email format.\").required(\"Required.\"),\r\n  password: yup\r\n    .string()\r\n    .required(\"Required.\")\r\n    .min(6, \"Password should atleast 6 char long.\"),\r\n});\r\n\r\nconst forgotSchema = yup.object().shape({\r\n  email: yup.string().email(\"Invalid email format.\").required(\"Required.\"),\r\n});\r\n\r\nconst registerSchema = yup.object().shape({\r\n  email: yup.string().email(\"Invalid email format.\").required(\"Required.\"),\r\n  username: yup\r\n    .string()\r\n    .required(\"Required.\")\r\n    .min(4, \"Username should atleast 4 char long.\"),\r\n  password: yup\r\n    .string()\r\n    .required(\"Required.\")\r\n    .min(6, \"Password should atleast 6 char long.\"),\r\n  confirmPassword: yup\r\n    .string()\r\n    .required(\"Required.\")\r\n    .oneOf([yup.ref(\"password\"), null], \"Passwords must match\"),\r\n});\r\n\r\nconst resetSchema = yup.object().shape({\r\n  password: yup\r\n    .string()\r\n    .required(\"Required.\")\r\n    .min(6, \"Password should atleast 6 char long.\"),\r\n  confirmPassword: yup\r\n    .string()\r\n    .required(\"Required.\")\r\n    .oneOf([yup.ref(\"password\"), null], \"Passwords must match\"),\r\n});\r\n\r\nexport { loginSchema, forgotSchema, registerSchema, resetSchema };\r\n"],"sourceRoot":""}